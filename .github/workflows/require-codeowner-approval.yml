# .github/workflows/require-codeowner-approval.yml

# Name of the workflow
name: 'Require Code Owner Approval'

# This workflow runs on every pull request review event
on:
  pull_request_review:
    types: [submitted]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job checks for code owner approval
  check_code_owner_approval:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # We only need to run this check if the review was an approval.
    # This prevents the workflow from running unnecessarily on comments or requests for changes.
    if: github.event.review.state == 'approved'

    steps:
      # We use the official checkout action to get access to the repository files,
      # including the CODEOWNERS file.
      - name: Checkout repository code
        uses: actions/checkout@v4
        with:
          # We need the full history to compare the PR head with its base.
          fetch-depth: 0

      - name: Verify Approver is a Code Owner
        run: |
          set -e # Exit immediately if a command fails

          # This script performs a basic check to see if the user who approved the PR
          # is listed as a code owner for at least one of the changed files.
          #
          # CAVEATS:
          # - This script has a simplified parser for the CODEOWNERS file and may not
          #   handle all complex glob patterns correctly.
          # - For a more robust, truly dependency-free solution, we recommend using GitHub's
          #   built-in "Require review from Code Owners" branch protection rule, which
          #   is the standard and most reliable method.

          APPROVER="@${{ github.event.review.user.login }}"
          TARGET_BRANCH="${{ github.event.pull_request.base.ref }}"

          echo "Checking approval from user: ${APPROVER}"
          echo "Pull request is targeting branch: ${TARGET_BRANCH}"

          # Fetch the target branch to ensure we can diff against it
          git fetch origin $TARGET_BRANCH

          # Get the list of files changed in this pull request
          CHANGED_FILES=$(git diff --name-only "origin/$TARGET_BRANCH...${{ github.event.pull_request.head.sha }}")

          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected. Skipping check."
            exit 0
          fi

          echo "--- Changed Files ---"
          echo "$CHANGED_FILES"
          echo "---------------------"

          CODEOWNERS_FILE=".github/CODEOWNERS"
          if [ ! -f "$CODEOWNERS_FILE" ]; then
            echo "No CODEOWNERS file found at '$CODEOWNERS_FILE'. Skipping check."
            exit 0
          fi

          # We iterate through each changed file and see if the approver owns it.
          while IFS= read -r file; do
            # Find the last matching rule in CODEOWNERS for the current file.
            # We use `tac` to read the file backwards, as the last matching pattern takes precedence.
            # We ignore commented or empty lines.
            MATCHING_RULE=$(tac "$CODEOWNERS_FILE" | grep -v '^#' | grep -v '^$' | awk -v f="$file" '
              {
                # This is a simple pattern match. It checks if the file path starts
                # with the pattern specified in the CODEOWNERS file.
                pattern = $1
                gsub(/\./, "\\.", pattern) # Escape dots for regex
                gsub(/\*/, ".*", pattern)   # Replace wildcard * with .*
                if (f ~ "^" pattern) {
                  print $0
                  exit
                }
              }
            ')

            if [ -z "$MATCHING_RULE" ]; then
              echo "INFO: No code owner rule found for file: $file"
              continue # Check the next file
            fi

            # Check if the approver is listed in the owners for the matched rule.
            if echo "$MATCHING_RULE" | grep -q -w "$APPROVER"; then
              echo "SUCCESS: $APPROVER is a valid code owner for the changed file: $file"
              echo "Rule: $MATCHING_RULE"
              # Since we found one valid approval, we can exit successfully.
              exit 0
            fi
          done <<< "$CHANGED_FILES"

          # If the script reaches this point, no changed file was owned by the approver.
          echo "FAILURE: $APPROVER is not listed as a code owner for any of the files in this PR."
          exit 1
